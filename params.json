{"body":"= Inkwell\r\n=======\r\n\r\nInkwell provides simple way to add social networking features like comments, reblogs, favorites, following/followers, communities and timelines to your Ruby on Rails application.\r\n\r\nRussian translation of README file available here[https://github.com/salkar/inkwell/blob/master/README_RU.rdoc].\r\n\r\n== Requirements\r\nYou should have two classes: User and Post or other identical. Between them should be a one-to-many relationship. For example:\r\n\r\n  class User < ActiveRecord::Base\r\n    has_many :posts\r\n  end\r\n\r\n  class Post < ActiveRecord::Base\r\n    belongs_to :user\r\n  end\r\n\r\nIf you want to use communities[https://github.com/salkar/inkwell#community-feature], then you need to have <code>Community</code> class, too:\r\n\r\n  class Community < ActiveRecord::Base\r\n  end\r\n\r\n== Installation\r\n\r\nPut in <code>Gemfile</code>:\r\n\r\n  gem 'inkwell', :git => 'git://github.com/salkar/inkwell.git'\r\n\r\n\r\nAfter it do <code>bundle install</code>\r\n\r\nAdd to your <code>User</code> model <code>acts_as_inkwell_user</code> and to your <code>Post</code> model <code>acts_as_inkwell_post</code>\r\n\r\n  class User < ActiveRecord::Base\r\n    has_many :posts\r\n    acts_as_inkwell_user\r\n  end\r\n  \r\n  class Post < ActiveRecord::Base\r\n    belongs_to :user\r\n    acts_as_inkwell_post\r\n  end\r\n\r\nIf you want to use communities, then add to your <code>Community</code> model <code>acts_as_inkwell_community</code>:\r\n  \r\n  class Community < ActiveRecord::Base\r\n    acts_as_inkwell_community\r\n  end\r\n\r\nCreate <code>inkwell.rb</code> file in <code>config/initializers</code> and put in it your names of <code>User</code> and <code>Post</code> tables (or other identical). \r\nPut in it name of <code>Community</code> table if you want to use it:\r\n\r\n  module Inkwell\r\n    class Engine < Rails::Engine\r\n      config.post_table = :posts\r\n      config.user_table = :users\r\n      config.community_table = :communities #if you want to use communities\r\n    end\r\n  end\r\n\r\nNext, get gem migrations:\r\n\r\n  rake inkwell:install:migrations\r\n\r\nand <code>db:migrate</code> it.\r\n\r\n== Usage\r\n\r\n=== Favorite features\r\n\r\nUser is able to favorite posts/comments:\r\n\r\n  @user.favorite @post\r\n  @user.favorite @comment\r\n\r\nTo delete post/comment from favorites:\r\n\r\n  @user.unfavorite @post\r\n\r\nTo check that post/comment enters in favorites:\r\n\r\n  @user.favorite? @post\r\n\r\nTo return favorite line, consisting of favorited posts and comments:\r\n\r\n  @user.favoriteline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)\r\n\r\nwhere \r\n* <code>last_shown_obj_id</code> - id of the last item in favorite line shown to the user. Get it from the <code>item_id_in_line</code> property of last item from previous <code>favoriteline</code> calls. This parameter is used for pagination and separation of the timeline.\r\n\r\n    fline = @user.favoriteline    #get first 10 items from @user favorite line\r\n    last_shown_obj_id = fline.last.item_id_in_line\r\n    fline_next_page = @user.favoriteline :last_shown_obj_id => last_shown_obj_id    #get next 10 items from @user favorite line\r\n\r\n* <code>limit</code> - defines the count of favorited items to return.\r\n\r\n    fline = @user.favoriteline :limit => 20    #return first 20 items from @user favorite line\r\n\r\n* <code>for_user</code> - <code>User</code>, who looks this favorite line. For him <code>is_reblogged</code> and <code>is_favorited</code> properties will been formed. \r\n  \r\n    @user.favorite @another_user_post\r\n    @user.reblog @another_user_post\r\n      \r\n    fline_for_unknown_user = @another_user.favoriteline\r\n    # For example, fline_for_unknown_user.first == @another_user_post\r\n    fline_for_unknown_user.first.is_reblogged    # => false\r\n    fline_for_unknown_user.first.is_favorited    # => false\r\n        \r\n    fline_for_user_who_reblog_and_favorite_another_user_post = @another_user.favoriteline :for_user => @user\r\n    # For example, fline_for_user_who_reblog_and_favorite_another_user_post.first == @another_user_post\r\n    fline_for_user_who_reblog_and_favorite_another_user_post.first.is_reblogged    # => true\r\n    fline_for_user_who_reblog_and_favorite_another_user_post.first.is_favorited    # => true\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/favorite_spec.rb].\r\n\r\n=== Reblog features\r\n\r\nReblog means that reblogged post will be added to user's blogline and to timelines of his followers. Thus, the behavior of reblogged object is similar to the post of the user who made this reblog.\r\nUser is able to reblog posts/comments:\r\n\r\n  @user.reblog @post\r\n  @user.reblog @comment\r\n\r\nTo delete post/comment from reblogs:\r\n\r\n  @user.unreblog @post\r\n\r\nTo check that post/comment enters in reblogs:\r\n\r\n  @user.reblog? @post\r\n\r\nReblogs don't have their own line and are contained in user's blogline.\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/reblog_spec.rb].\r\n\r\n=== Comment features\r\n\r\nUser is able to create comments for post or other comment. If you want to comment the post:\r\n\r\n  @user.comments.create :post_id => @post.id, :body => \"comment_body\"\r\n\r\nIf you want to comment other comment you should add <code>parent_id</code> of parent comment:\r\n\r\n  @user.comments.create :post_id => @parent_post.id, :body => \"comment_body\", :parent_id => @parent_comment.id\r\n\r\nTo delete comment you should use <code>destroy</code> method:\r\n\r\n  @comment.destroy\r\n\r\nYou are able to get comment line for post or comment. It consists of comments for this object in reverse chronological order.\r\n\r\n<i>Notice: returned array will have back order to simplify the use. Last comment is at the bottom usually.</i>\r\n\r\nTo get comment line:\r\n\r\n  commentline(:last_shown_comment_id => nil, :limit => 10, :for_user => nil)\r\n\r\nwhere <code>last_shown_comment_id</code> is id of last shown comment from previous commentline results. For example:\r\n\r\n  cline = @post.commentline    #get last 10 comments for @post\r\n  last_shown_comment_id = cline.first.id    # First element is taken due to reverse order. In fact, it is the oldest of these comments.\r\n  cline_next_page = @post.commentline :last_shown_comment_id => last_shown_comment_id\r\n\r\n<code>Limit</code> and <code>for_user</code> mean the same thing as in the favoriteline[https://github.com/salkar/inkwell#favorite-features].\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/comments_spec.rb].\r\n\r\n=== Follow features\r\n\r\nUser is able to follow another users. It allows him to get followed user's blogline in his timeline.\r\n\r\nTo follow user:\r\n\r\n  @user.follow @another_user\r\n\r\nAfter it last 10 <code>@another_user</code> blogline's items will be transferred to <code>@user</code> timeline. And each new <code>@another_user</code> blogline item will be added to <code>@user</code> timeline.\r\n\r\nTo unfollow user:\r\n\r\n  @user.unfollow @another_user\r\n\r\nTo check that user is follower of another user:\r\n\r\n  @user.follow? @another_user\r\n\r\nTo get followers ids for user and ids of users, which he follow:\r\n\r\n  @user.followers_row\r\n  @user.followings_row\r\n\r\nBoth methods return arrays of ids.\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/following_spec.rb].\r\n\r\n=== Blogline feature\r\n\r\nUser blogline is consists of his posts and his reblogs. To get it:\r\n\r\n  @user.blogline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)\r\n\r\nwhere parameters are similar with described above[https://github.com/salkar/inkwell#favorite-features] favoriteline parameters.\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/blogline_spec.rb].\r\n\r\n=== Timeline feature\r\n\r\nUser timeline is consists of items from bloglines of users he follows. To get it:\r\n\r\n  @user.timeline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)\r\n\r\nwhere parameters are similar with described above[https://github.com/salkar/inkwell#favorite-features] favoriteline parameters.\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/timeline_spec.rb].\r\n\r\n=== Community feature\r\n\r\nCommunity is association of users. It has own blogline, consisting of posts of its members. Community member can send his post to the community blogline.\r\nThen this post is added to the timelines of other community users.\r\n\r\nWhen you create community you need to pass <code>owner_id</code>:\r\n\r\n   @community = Community.create :name => \"Community\", :owner_id => @user.id \r\n\r\nUser with the passed id will be the first administrator of created community and will be added to it.\r\n\r\nTo add a user to the open community:\r\n\r\n  @user.join @community\r\n\r\nAfter it last 10 <code>@community</code> blogline's items will be transferred to <code>@user</code> timeline. And each new <code>@community</code> blogline item will be added to <code>@user</code> timeline.\r\nMoreover <code>@user</code> will be able to add their posts in community blogline.\r\n\r\nTo remove a user from community:\r\n\r\n  @admin.kick :user => @user, :from_community => @community\r\n\r\nwhere <code>admin</code> is community administrator and <code>@user</code> is deleted user.\r\n\r\nIf user leave community:\r\n\r\n  @user.leave @community\r\n\r\nAfter leaving the community (both methods) its blogline items will be removed from the user timeline.\r\n\r\nTo send post to the community blogline:\r\n\r\n  @user.send_post_to_community :post => @user_post, :to_community => @community\r\n\r\nSent post will be added to timelines of community members. A post can be sent to the community only by its owner.\r\n\r\nTo remove post from community blogline:\r\n\r\n  @user.remove_post_from_community :post => @user_post, :from_community => @community\r\n\r\nor \r\n\r\n  @admin.remove_post_from_community :post => @user_post, :from_community => @community\r\n\r\nOnly post owner or administrator of community can remove the post from the community blogline.\r\n\r\nTo check that the user is a member of the community:\r\n\r\n  @community.include_user? @user\r\n\r\nTo check that the user is an admin of the community:\r\n\r\n  @community.include_admin? @user\r\n\r\nEach administrator has the access level. Community owner has access level 0. Administrators, to whom he granted admin permissions, have access level 1 and so on.\r\nThus the lower the access level, the more permissions. For example, admin with access level 0 can delete admin with access level 1 but not vice versa.\r\n\r\nTo grant admin permissions:\r\n\r\n  @admin.grant_admin_permissions :to_user => @new_admin, :in_community => @community\r\n\r\nTo revoke admin permissions:\r\n\r\n   @admin.revoke_admin_permissions :user => @admin_who_is_removed, :in_community => @community\r\n\r\nTo get admin's access level:\r\n\r\n  @community.admin_level_of @admin \r\n\r\nTo get communities ids in which there is this post:\r\n\r\n  @post.communities_row\r\n\r\nTo get ids of community members:\r\n\r\n  @community.users_row\r\n\r\nTo get ids of communities to which the user has joined:\r\n\r\n  @user.communities_row\r\n\r\nCommunity blogline is consists of the posts of members that have added to it. To get it:\r\n\r\n  @community.blogline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)\r\n\r\nwhere parameters are similar with described above[https://github.com/salkar/inkwell#favorite-features] favoriteline parameters.\r\n\r\nMore examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/lib/acts_as_inkwell_community/base.rb]\r\n","name":"Inkwell","tagline":"Inkwell provides simple way to add social networking features like comments, reblogs, favorites, following/followers, communities and timelines to your Ruby on Rails application.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}